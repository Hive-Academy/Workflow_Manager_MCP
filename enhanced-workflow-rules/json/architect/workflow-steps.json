{
  "workflowSteps": [
    {
      "name": "comprehensive_context_validation_and_implementation_planning",
      "displayName": "Comprehensive Context Validation and Implementation Planning",
      "description": "Retrieve task context with codebase analysis, validate requirements, and create strategic implementation plan",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "25-35 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Intelligent context consumption with validation and strategic implementation planning",
        "principles": [
          "Consume boomerang's comprehensive codebase analysis and task details",
          "Validate task requirements and technical feasibility quickly",
          "Create strategic implementation plan with SOLID principles",
          "Focus on architectural enhancement rather than re-analysis"
        ],
        "methodology": "Context-driven planning with evidence-based validation",
        "planningStrategy": {
          "contextConsumption": "Extract task description, codebase analysis, and requirements from boomerang",
          "quickValidation": "Validate technical feasibility and architectural alignment",
          "strategicPlanning": "Create implementation plan with SOLID principles and existing patterns",
          "qualityIntegration": "Define quality gates and success criteria"
        },
        "solidPrinciples": {
          "singleResponsibility": "Each class/service has one reason to change",
          "openClosed": "Extensible through inheritance/composition, not modification",
          "liskovSubstitution": "Derived classes substitutable for base classes",
          "interfaceSegregation": "Clients depend only on interfaces they use",
          "dependencyInversion": "Depend on abstractions, not concretions"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute TaskOperations.get with comprehensive inclusion to get task details and codebase analysis",
          "Validate task requirements against existing codebase analysis and architectural patterns",
          "Design solution approach using SOLID principles and existing patterns",
          "Check for existing implementation plan and update or create new one",
          "Document architectural decisions with evidence-based rationale"
        ],
        "validationSteps": [
          "Verify task requirements are clear and technically feasible",
          "Confirm codebase analysis provides sufficient architectural context",
          "Validate solution approach aligns with existing patterns and constraints"
        ],
        "planningSteps": [
          "Design implementation approach using SOLID principles",
          "Create or update implementation plan with strategic guidance",
          "Define quality constraints and success criteria",
          "Establish architectural rationale and verification evidence"
        ]
      },
      "qualityChecklist": [
        "Task context and codebase analysis retrieved and validated",
        "Technical feasibility confirmed with architectural alignment",
        "Implementation plan created or updated with SOLID principles",
        "Quality constraints and success criteria defined",
        "Architectural decisions documented with evidence-based rationale"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        },
        {
          "name": "check_existing_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "get_plan"
          },
          "sequenceOrder": 2
        },
        {
          "name": "create_or_update_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "{{create_or_update_based_on_existing}}"
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "comprehensive_context_validation_and_planning",
      "reportTemplate": "context_validation_and_implementation_planning"
    },
    {
      "name": "strategic_subtask_creation_with_quality_gates",
      "displayName": "Strategic Subtask Creation with Quality Gates",
      "description": "Create strategic implementation subtasks with comprehensive guidance and quality gates",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "20-25 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Strategic subtask creation with comprehensive guidance and measurable quality gates",
        "principles": [
          "Create subtasks with detailed strategic guidance and architectural context",
          "Include specific implementation guidance with code examples",
          "Define measurable quality gates and validation criteria",
          "Ensure SOLID principles compliance and pattern consistency",
          "NEVER create documentation subtasks - documentation is handled by integration-engineer role"
        ],
        "methodology": "Detailed subtask planning with quality assurance integration",
        "subtaskCreationStrategy": {
          "batchOrganization": "Create strategic batches with 3-8 subtasks following dependency order",
          "guidanceDetail": "Provide comprehensive strategic guidance for each subtask",
          "implementationSpecifics": "Include architectural context, implementation specifics, and code examples",
          "qualityIntegration": "Define quality constraints, success criteria, and anti-pattern prevention",
          "documentationExclusion": "NEVER create subtasks for documentation updates - integration-engineer role handles all documentation"
        },
        "qualityGateDefinition": {
          "codeQuality": "SOLID compliance, test coverage, documentation standards",
          "performance": "Response times, query efficiency, resource usage metrics",
          "security": "Input validation, authentication, authorization requirements",
          "integration": "API contracts, error handling, monitoring requirements"
        },
        "subtaskScope": {
          "includeInSubtasks": [
            "Code implementation and refactoring",
            "Unit and integration testing",
            "Performance optimization",
            "Security implementation",
            "Error handling and validation",
            "Configuration and setup changes"
          ],
          "excludeFromSubtasks": [
            "Documentation updates (README, memory bank, etc.)",
            "Pull request creation",
            "Git operations and commits",
            "Deployment and integration tasks"
          ]
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Create strategic batches with 3-8 subtasks following dependency order",
          "Provide comprehensive strategic guidance for each subtask",
          "Include architectural context, implementation specifics, and code examples",
          "Define quality constraints, success criteria, and anti-pattern prevention",
          "Establish measurable quality gates and validation criteria",
          "Document performance targets and security requirements",
          "EXCLUDE documentation subtasks - integration-engineer handles all documentation"
        ],
        "subtaskCreationSteps": [
          "Organize implementation work into logical dependency-ordered batches",
          "For each subtask, provide architectural context and problem being solved",
          "Include specific implementation guidance with complete code examples",
          "Define measurable success criteria and validation requirements",
          "Focus ONLY on code implementation, testing, and technical tasks",
          "Do NOT create subtasks for documentation, git operations, or deployment"
        ],
        "qualityGateSteps": [
          "Define comprehensive quality gates covering code, performance, security",
          "Establish measurable validation criteria that are enforceable",
          "Align quality standards with baseline metrics and security requirements",
          "Document performance targets and monitoring requirements"
        ]
      },
      "qualityChecklist": [
        "Strategic batches created with appropriate subtask organization",
        "Each subtask includes comprehensive strategic guidance and context",
        "Implementation specifics with code examples provided",
        "Quality constraints and success criteria clearly defined",
        "Measurable quality gates established for all phases",
        "Performance targets and security requirements specified",
        "NO documentation subtasks created - integration-engineer role handles documentation"
      ],
      "conditions": [
        {
          "name": "context_validation_and_planning_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_context_validation_and_implementation_planning"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "create_strategic_subtasks",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "create_subtasks"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "strategic_subtasks_and_quality_gates",
      "reportTemplate": "strategic_subtask_creation"
    },
    {
      "name": "strategic_senior_developer_delegation",
      "displayName": "Strategic Senior Developer Delegation with Context",
      "description": "Delegate to senior developer with comprehensive strategic context and implementation readiness",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "5-8 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Strategic delegation with comprehensive context preservation and implementation readiness",
        "principles": [
          "Include task-slug for human-readable reference",
          "Provide complete strategic context and architectural guidance",
          "Ensure implementation readiness with clear quality requirements",
          "Establish ongoing architectural support availability"
        ],
        "methodology": "Context-preserving delegation with strategic implementation guidance"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute delegation with comprehensive strategic context",
          "Include task-slug for clear human-readable reference",
          "Communicate implementation priorities and architectural guidance",
          "Ensure quality requirements and success criteria are understood",
          "Provide clear message about architectural support availability",
          "Confirm delegation context enables immediate productive work"
        ]
      },
      "qualityChecklist": [
        "Delegation executed with comprehensive strategic context",
        "Task-slug included for human-readable reference",
        "Implementation priorities and architectural guidance communicated",
        "Quality requirements and success criteria clearly understood",
        "Architectural support availability established",
        "Delegation enables immediate productive implementation work"
      ],
      "conditions": [
        {
          "name": "subtasks_and_quality_gates_ready",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_subtask_creation_with_quality_gates"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_strategic_delegation",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "strategic_delegation_complete",
      "reportTemplate": "architect_delegation_summary"
    }
  ]
}
