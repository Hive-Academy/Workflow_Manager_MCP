{
  "workflowSteps": [
    {
      "name": "mandatory_git_integration_setup",
      "displayName": "MANDATORY: Git Integration Setup",
      "description": "CRITICAL: Complete Git operations before task creation. STOP workflow if any step fails.",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "3-5 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Complete git operations verification and setup before task creation",
        "principles": [
          "Verify git repository status and configuration",
          "Ensure clean working directory or proper handling of existing changes",
          "Create feature branch with descriptive naming",
          "Verify all git operations work before proceeding"
        ],
        "methodology": "Git-first approach with comprehensive verification",
        "setupPhases": {
          "statusVerification": "Check git status and verify repository state",
          "branchManagement": "Create appropriate feature branch for task work",
          "configurationCheck": "Verify git configuration and repository setup",
          "operationValidation": "Test basic git operations work correctly"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Check git repository status and configuration",
          "Verify working directory state (clean or with expected changes)",
          "Create feature branch using descriptive naming convention",
          "Verify git operations work correctly",
          "Document any git-related setup or configuration issues"
        ],
        "gitOperations": [
          "Execute 'git status --porcelain' to check working directory",
          "Create feature branch with format 'feature/TSK-{ID}-{short-description}'",
          "Verify branch creation and checkout operations work",
          "Test basic git commands to ensure repository is functional"
        ],
        "errorHandling": [
          "Handle working directory changes appropriately",
          "Address any git configuration issues",
          "Resolve branch naming conflicts if they exist",
          "Ensure git operations are functional before proceeding"
        ]
      },
      "qualityChecklist": [
        "Git repository status verified and documented",
        "Working directory state handled appropriately",
        "Feature branch created with proper naming convention",
        "Git operations verified to work correctly",
        "Any git issues identified and resolved"
      ],
      "conditions": [
        {
          "name": "git_repository_exists",
          "conditionType": "DIRECTORY_EXISTS",
          "logic": {
            "check": "directory_exists",
            "parameters": {
              "directories": [".git"]
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "git_setup",
      "reportTemplate": "git_integration_setup"
    },
    {
      "name": "mandatory_codebase_analysis_and_task_creation",
      "displayName": "Task Creation and Codebase Analysis",
      "description": "Analyze codebase systematically, then create comprehensive task with analysis results",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "10-15 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Combined analysis and task creation for efficiency and context preservation",
        "principles": [
          "Perform systematic codebase analysis with functional verification",
          "Create task immediately with analysis results to preserve context",
          "Link task to current workflow execution via executionId",
          "Structure analysis data for downstream role consumption"
        ],
        "methodology": "Analysis → Task Creation → Context Linking"
      },
      "approachGuidance": {
        "stepByStep": [
          "Analyze project structure and identify key patterns",
          "Document technology stack and architecture findings",
          "Test current functionality to verify capabilities",
          "Extract task requirements from user input",
          "Create comprehensive task with analysis data",
          "CRITICAL: Include executionId to link task to workflow"
        ],
        "analysisPhase": [
          "Map technology stack and versions",
          "Identify architectural patterns and design principles",
          "Test functionality to validate current capabilities",
          "Document findings with evidence"
        ],
        "taskCreationPhase": [
          "Extract requirements from user request",
          "Structure analysis findings for downstream consumption",
          "Call TaskOperations.create with ALL required parameters",
          "Immediately update task status to 'in-progress' using TaskOperations.update",
          "Verify task creation and execution linking"
        ]
      },
      "qualityChecklist": [
        "Architecture patterns and technology stack documented",
        "Current functionality tested and verified",
        "Task created with comprehensive description and requirements",
        "Task status updated to 'in-progress' immediately after creation",
        "Codebase analysis properly structured in task",
        "CRITICAL: executionId included in TaskOperations.create call",
        "Task successfully linked to current workflow execution",
        "Git branch information recorded in task",
        "All acceptance criteria clearly defined"
      ],
      "conditions": [
        {
          "name": "git_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_git_integration_setup"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "create_task_with_codebase_analysis",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "create",
            "requiredParameters": [
              "operation",
              "executionId",
              "taskData",
              "description",
              "codebaseAnalysis"
            ]
          },
          "sequenceOrder": 1
        },
        {
          "name": "update_task_status_to_in_progress",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "update",
            "requiredParameters": ["operation", "taskId", "taskData"],
            "parameterGuidance": {
              "taskId": "Use the task ID returned from the create operation",
              "taskData": "Set status to 'in-progress' to indicate work has begun"
            }
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "task_creation_with_analysis",
      "reportTemplate": "task_creation_completion"
    },
    {
      "name": "research_decision_framework_with_validation",
      "displayName": "Research Decision Framework with Current State Validation",
      "description": "Evaluate research necessity using verified decision criteria and evidence",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "3-5 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Evidence-based research decision making with mandatory verification",
        "principles": [
          "Base decisions on verified current state testing",
          "Document evidence supporting research rationale",
          "Use tested capabilities vs assumptions for decisions",
          "Provide specific research questions if research needed"
        ],
        "methodology": "Verification-driven decision matrix with evidence documentation",
        "decisionCriteria": {
          "definitelyResearch": [
            "unfamiliar_technologies_verified",
            "multiple_approaches_needed_confirmed",
            "critical_architecture_decisions_tested",
            "security_requirements_beyond_current",
            "unknown_external_systems_proven"
          ],
          "unlikelyResearch": [
            "clear_implementation_path_confirmed",
            "well_understood_technology_validated",
            "similar_work_completed_verified",
            "standard_operations_tested"
          ]
        },
        "evidenceRequirements": {
          "currentStateTested": "Verify current system capabilities through actual testing",
          "capabilitiesVerified": "Document what the system can and cannot do",
          "limitationsConfirmed": "Test and confirm system limitations",
          "complexityValidated": "Validate complexity assumptions through hands-on investigation",
          "verificationEvidence": "Provide concrete evidence from testing and investigation"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Review functional verification results from previous step",
          "Test existing functionality to understand current capabilities",
          "Verify technical claims through actual code execution",
          "Validate complexity assumptions with hands-on investigation",
          "Apply evidence-based decision criteria for research necessity",
          "Document specific research questions if research is needed"
        ],
        "evaluationSteps": [
          "Apply decision matrix criteria to current task requirements",
          "Compare task complexity against verified system capabilities",
          "Assess whether current knowledge is sufficient for implementation",
          "Determine if additional research would provide significant value"
        ],
        "documentationSteps": [
          "Document decision rationale with supporting evidence",
          "Record verification results that influenced the decision",
          "Specify research questions if research is recommended",
          "Prepare context for next role based on decision outcome"
        ]
      },
      "qualityChecklist": [
        "Current state tested and capabilities verified",
        "Technical claims validated through execution",
        "Complexity assumptions tested with evidence",
        "Decision criteria applied with verification evidence",
        "Research decision documented with rationale",
        "Specific research questions provided if research needed"
      ],
      "conditions": [
        {
          "name": "analysis_and_task_creation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_codebase_analysis_and_task_creation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "research_decision",
      "reportTemplate": "evidence_based_research_decision"
    },
    {
      "name": "role_delegation_with_task_slug",
      "displayName": "Role Delegation with Task-Slug",
      "description": "Delegate to appropriate role with comprehensive context and human-readable references",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "2-3 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Context-rich delegation with human-readable task references",
        "principles": [
          "Include task-slug for human-readable reference",
          "Provide comprehensive context handoff",
          "Select appropriate target role based on research decision",
          "Ensure proper workflow continuity"
        ],
        "methodology": "MCP-driven delegation with structured context preservation",
        "delegationStrategy": {
          "roleSelection": "Determine target role based on research decision results (researcher if research needed, architect if direct implementation)",
          "contextPreparation": "Prepare comprehensive delegation context including task-slug and analysis results",
          "handoffExecution": "Execute workflow delegation through MCP operations with full context",
          "continuityEnsurance": "Ensure proper context handoff and workflow continuity"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Determine target role based on research decision results",
          "Prepare comprehensive delegation context including task-slug",
          "Execute workflow delegation through MCP operations",
          "Ensure proper context handoff and documentation"
        ],
        "roleSelectionSteps": [
          "Review research decision outcome from previous step",
          "Select researcher role if research is needed",
          "Select architect role if implementation can proceed directly",
          "Prepare role-specific delegation message and context"
        ],
        "delegationSteps": [
          "Call WorkflowOperations.delegate with target role",
          "Include task-slug for human-readable reference",
          "Provide comprehensive handoff message with context",
          "Ensure all analysis results are available to next role"
        ]
      },
      "qualityChecklist": [
        "Target role selected based on evidence-based research decision",
        "Task-slug included for human-readable reference",
        "Comprehensive context prepared for handoff",
        "Delegation executed successfully through MCP",
        "Workflow continuity ensured"
      ],
      "conditions": [
        {
          "name": "research_decision_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "research_decision_framework_with_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_role_delegation",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "delegation",
      "reportTemplate": "role_delegation_with_context"
    }
  ]
}
