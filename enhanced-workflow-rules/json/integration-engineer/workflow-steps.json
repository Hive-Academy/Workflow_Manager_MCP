{
  "workflowSteps": [
    {
      "name": "comprehensive_context_and_implementation_validation",
      "displayName": "Comprehensive Context and Implementation Validation",
      "description": "Retrieve complete implementation context and validate delivery readiness with evidence collection",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Comprehensive context acquisition with systematic implementation completeness validation",
        "principles": [
          "Retrieve complete task context with all implementation evidence and quality metrics",
          "Validate all delivery components: code, testing, documentation, quality gates",
          "Verify acceptance criteria satisfaction with documented evidence",
          "Assess production readiness with comprehensive validation checklist"
        ],
        "methodology": "Evidence-based validation with comprehensive delivery readiness assessment",
        "validationMethod": {
          "batchCompletion": "Confirm all planned implementation batches completed and approved",
          "codeReviewStatus": "Validate APPROVED status with comprehensive testing evidence",
          "acceptanceCriteria": "Verify all criteria met with documented evidence",
          "qualityGates": "Ensure build, lint, tests, performance, security standards satisfied",
          "integrationTesting": "Confirm integration validated and working properly"
        },
        "analysisMethod": {
          "modifiedFiles": "Identify and catalog changed files with purposes and descriptions",
          "newFiles": "Document new files and directories with comprehensive descriptions",
          "deletedFiles": "Note removed or deprecated files with rationale",
          "configurationChanges": "Identify config, environment, and dependency changes",
          "databaseChanges": "Document schema migrations and data modifications"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute query_task_context with comprehensive inclusion (plans, subtasks, analysis, evidence)",
          "Validate batch completion verification: all planned implementation batches completed and approved",
          "Verify code review status: APPROVED status with comprehensive testing validation",
          "Validate acceptance criteria: all original criteria met with documented evidence",
          "Assess quality gates: build success, test coverage, performance, security standards",
          "Perform file and change analysis: modified files, new files, configuration changes documentation"
        ],
        "validationCriteria": [
          "Complete implementation context retrieved with all evidence and quality metrics",
          "Batch completion verified with all planned implementation batches completed and approved",
          "Code review status validated as APPROVED with comprehensive testing evidence",
          "Acceptance criteria verified as satisfied with documented evidence and validation",
          "Quality gates assessment completed: build, lint, tests, performance, security standards",
          "File and change analysis documented: modified, new, deleted files with purposes and rationale"
        ]
      },
      "qualityChecklist": [
        "Complete implementation context retrieved with all evidence and quality metrics",
        "Batch completion verified with all planned implementation batches completed and approved",
        "Code review status validated as APPROVED with comprehensive testing evidence",
        "Acceptance criteria verified as satisfied with documented evidence and validation",
        "Quality gates assessment completed: build, lint, tests, performance, security standards",
        "File and change analysis documented: modified, new, deleted files with purposes and rationale"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_implementation_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "comprehensive_context_and_validation",
      "reportTemplate": "implementation_context_and_completeness_validation"
    },
    {
      "name": "mandatory_git_integration_and_remote_synchronization",
      "displayName": "MANDATORY: Git Integration and Remote Synchronization",
      "description": "Execute comprehensive git operations with error handling and remote synchronization for integration readiness",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "15-25 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "MANDATORY git integration operations with comprehensive error handling and validation",
        "principles": [
          "CRITICAL: Ensure all implementation properly committed and ready for integration",
          "HALT INTEGRATION immediately if any git operation fails",
          "Verify feature branch status and prevent integration from main/master branches",
          "Execute comprehensive commit creation with detailed integration message",
          "Perform remote synchronization with push verification and error handling"
        ],
        "methodology": "Git-first integration with mandatory validation and error recovery protocols",
        "gitOperations": {
          "statusAssessment": {
            "statusCheck": "Execute 'git status --porcelain' to verify working directory state",
            "branchVerification": "Execute 'git branch --show-current' to confirm feature branch",
            "branchValidation": "Ensure current branch is feature branch, not main/master",
            "cleanStateVerification": "Verify working directory is clean and ready for commit"
          },
          "stagingAndCommit": {
            "stageFiles": "Execute 'git add .' to stage all implementation changes",
            "verifyStaged": "Execute 'git diff --cached --stat' to verify staged changes",
            "checkUnstaged": "Execute 'git diff --name-only' to ensure no unstaged files",
            "createCommit": "Execute git commit with comprehensive integration message",
            "verifyCommit": "Execute 'git rev-parse HEAD' for commit hash validation"
          },
          "remoteSynchronization": {
            "fetchLatest": "Execute 'git fetch origin' to get latest remote changes",
            "pushBranch": "Execute 'git push origin [current_branch]' to push feature branch",
            "verifyPush": "Validate push success and confirm remote synchronization",
            "errorHandling": "Implement error recovery and escalation protocols for failures"
          }
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute git status assessment: verify working directory clean and correct feature branch",
          "Perform file staging and commit verification: stage all changes and verify no unstaged files",
          "Create comprehensive integration commit: detailed message with implementation summary and quality gates",
          "Execute remote synchronization: fetch latest, push feature branch, verify success",
          "Implement error handling protocol: document errors, attempt resolution, halt if unresolvable",
          "Validate git integration completion: clean state, successful push, ready for PR creation"
        ],
        "validationCriteria": [
          "Git status assessment completed with clean working directory and correct feature branch verified",
          "File staging and commit verification successful with all implementation changes committed",
          "Comprehensive integration commit created with detailed message including quality gates validation",
          "Remote synchronization completed with successful push and verification of feature branch",
          "Error handling protocol implemented with resolution attempts and escalation procedures",
          "Git integration completion validated with clean state and integration readiness confirmed"
        ]
      },
      "qualityChecklist": [
        "Git status assessment completed with clean working directory and correct feature branch verified",
        "File staging and commit verification successful with all implementation changes committed",
        "Comprehensive integration commit created with detailed message including quality gates validation",
        "Remote synchronization completed with successful push and verification of feature branch",
        "Error handling protocol implemented with resolution attempts and escalation procedures",
        "Git integration completion validated with clean state and integration readiness confirmed"
      ],
      "conditions": [
        {
          "name": "context_and_validation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_context_and_implementation_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "git_integration_operations",
      "reportTemplate": "mandatory_git_integration_and_synchronization"
    },
    {
      "name": "intelligent_documentation_and_pull_request_creation",
      "displayName": "Intelligent Documentation and Pull Request Creation",
      "description": "Intelligently assess documentation needs and create pull request with comprehensive validation evidence",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "20-40 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Intelligent documentation assessment with targeted updates and comprehensive pull request creation",
        "principles": [
          "Analyze if documentation actually needs updates based on implementation changes",
          "Skip unnecessary documentation updates to avoid busywork",
          "Focus on documentation that is actually outdated or missing",
          "Create comprehensive pull request with detailed description and validation evidence"
        ],
        "methodology": "Smart documentation analysis with targeted updates and comprehensive pull request preparation",
        "intelligentDocumentationAssessment": {
          "changeImpactAnalysis": "Analyze what was actually changed and if it affects user-facing documentation",
          "documentationRelevance": "Determine if changes require README, API docs, or architecture documentation updates",
          "skipCriteria": "Skip documentation updates if changes are internal refactoring, bug fixes, or don't affect public APIs",
          "updateCriteria": "Update documentation only if new features, API changes, or user workflows are affected"
        },
        "targetedDocumentationUpdates": {
          "conditionalMemoryBankUpdates": "Update memory bank files ONLY if architectural changes or new capabilities added",
          "conditionalReadmeUpdates": "Update README ONLY if installation, usage, or API documentation is affected",
          "conditionalCleanup": "Perform cleanup ONLY if outdated information is discovered during analysis",
          "focusedUpdates": "Focus updates on areas actually impacted by implementation changes"
        },
        "pullRequestCreation": {
          "preparation": "Generate file change summary, check for conflicts, create comprehensive description",
          "prDescription": "Include task summary, changes overview, acceptance criteria verification",
          "technicalDetails": "Document implementation changes, testing validation, quality metrics",
          "reviewerGuidance": "Provide deployment considerations, review checklist, integration validation"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Analyze implementation changes to determine if documentation updates are actually needed",
          "Apply intelligent criteria to decide which documentation requires updates vs can be skipped",
          "Update only relevant documentation: memory bank files, README sections, or API docs as needed",
          "Skip unnecessary documentation updates for internal changes that don't affect users",
          "Generate pull request preparation: file change summary, conflicts check, comprehensive description creation",
          "Create detailed pull request with implementation summary, validation evidence, and reviewer guidance"
        ],
        "intelligentAssessmentSteps": [
          "Review implementation changes: Are these user-facing? Do they affect APIs? New features?",
          "Assess documentation relevance: Which docs are actually outdated by these changes?",
          "Apply skip criteria: Internal refactoring, bug fixes, code quality improvements typically don't need doc updates",
          "Apply update criteria: New features, API changes, installation changes, usage changes require updates"
        ],
        "conditionalUpdateSteps": [
          "IF architectural changes or new capabilities: Update memory bank documentation",
          "IF API changes or new features: Update README and relevant sections",
          "IF installation or setup changes: Update installation documentation",
          "IF no user-facing changes: Skip documentation updates and proceed to PR creation"
        ],
        "pullRequestSteps": [
          "Generate comprehensive file change summary with implementation focus",
          "Create detailed PR description with task context, changes overview, and validation evidence",
          "Include technical implementation details and quality validation results",
          "Provide reviewer guidance with deployment considerations and integration checklist"
        ]
      },
      "qualityChecklist": [
        "Implementation changes analyzed to determine actual documentation update needs",
        "Intelligent criteria applied to skip unnecessary documentation updates",
        "Only relevant documentation updated based on actual impact of implementation changes",
        "Pull request preparation executed with comprehensive file change summary and description",
        "Detailed pull request created with implementation summary, validation evidence, and reviewer guidance",
        "Technical details and deployment considerations included for effective review process"
      ],
      "conditions": [
        {
          "name": "git_integration_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_git_integration_and_remote_synchronization"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "intelligent_documentation_and_pull_request",
      "reportTemplate": "intelligent_documentation_and_pr_creation"
    },
    {
      "name": "final_quality_validation_and_task_completion",
      "displayName": "Final Quality Validation and Task Completion",
      "description": "Execute final validation, complete task, and coordinate delivery with comprehensive reporting",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "15-25 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Comprehensive final validation with task completion and delivery coordination",
        "principles": [
          "Perform comprehensive validation of all deliverables with evidence collection",
          "Complete task with detailed completion report and validation evidence",
          "Coordinate final delivery with comprehensive handoff documentation",
          "Prepare for workflow execution completion in next step"
        ],
        "methodology": "Evidence-based completion with comprehensive delivery coordination and task finalization",
        "finalValidation": {
          "implementationQuality": "Validate functional integration, performance, security, user experience",
          "documentationQuality": "Validate accuracy, completeness, usability, consistency, maintenance",
          "technicalQuality": "Validate build verification, test coverage, code quality, dependencies, configuration"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute final quality validation: implementation, documentation, and technical quality with comprehensive checklists",
          "Create integration completion report: comprehensive validation evidence, acceptance criteria verification, delivery evidence",
          "Complete task with comprehensive completion data including all validation evidence",
          "Prepare delivery coordination: comprehensive delivery documentation, success metrics, monitoring procedures",
          "Complete knowledge preservation: implementation evidence, architectural patterns, lessons learned documentation",
          "Validate final handoff: actionable next steps, comprehensive context preservation, production readiness confirmation"
        ],
        "validationCriteria": [
          "Final quality validation completed with implementation, documentation, and technical quality verification",
          "Integration completion report created with comprehensive validation evidence and acceptance criteria verification",
          "Task completion executed with comprehensive completion data and validation evidence",
          "Delivery coordination prepared with comprehensive documentation, success metrics, and monitoring procedures",
          "Knowledge preservation completed with implementation evidence and architectural patterns documentation",
          "Final handoff validated with actionable next steps and production readiness confirmation"
        ]
      },
      "qualityChecklist": [
        "Final quality validation completed with implementation, documentation, and technical quality verification",
        "Integration completion report created with comprehensive validation evidence and acceptance criteria verification",
        "Task completion executed with comprehensive completion data and validation evidence",
        "Delivery coordination prepared with comprehensive documentation, success metrics, and monitoring procedures",
        "Knowledge preservation completed with implementation evidence and architectural patterns documentation",
        "Final handoff validated with actionable next steps and production readiness confirmation"
      ],
      "conditions": [
        {
          "name": "documentation_and_pr_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "intelligent_documentation_and_pull_request_creation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "create_integration_completion_report",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "ReviewOperations",
            "operation": "create_completion"
          },
          "sequenceOrder": 1
        },
        {
          "name": "execute_task_completion",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "complete"
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "final_validation_and_task_completion",
      "reportTemplate": "integration_completion_and_task_finalization"
    },
    {
      "name": "workflow_execution_completion",
      "displayName": "Workflow Execution Completion",
      "description": "Complete the workflow execution using workflow_execution_operations tool to finalize the entire workflow",
      "sequenceNumber": 5,
      "isRequired": true,
      "estimatedTime": "5-10 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Direct workflow execution completion using workflow_execution_operations tool",
        "principles": [
          "Use workflow_execution_operations tool directly to complete the execution",
          "Ensure proper execution completion with comprehensive context",
          "Finalize the entire workflow process with proper closure",
          "Validate execution completion success and provide final status"
        ],
        "methodology": "Direct tool usage for workflow execution completion",
        "executionCompletionGuidance": {
          "toolUsage": "Use workflow_execution_operations tool with complete_execution operation",
          "requiredParameters": "Provide executionId for the current workflow execution",
          "completionValidation": "Verify execution completion success and final status",
          "finalStatus": "Confirm entire workflow process completed successfully"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute workflow_execution_operations tool with complete_execution operation",
          "Provide current executionId to complete the workflow execution",
          "Validate execution completion success and verify final status",
          "Confirm entire workflow process completed successfully",
          "Document final execution completion status and provide closure summary",
          "Ensure comprehensive workflow completion with all evidence preserved"
        ],
        "executionCompletionSteps": [
          "Call workflow_execution_operations({ operation: 'complete_execution', executionId: currentExecutionId })",
          "Verify the execution completion response indicates success",
          "Validate that execution status is properly updated to completed",
          "Confirm all workflow data and evidence is preserved"
        ],
        "validationSteps": [
          "Check execution completion response for success confirmation",
          "Verify execution status updated to completed state",
          "Confirm workflow process fully finalized with proper closure",
          "Document final completion status and summary"
        ]
      },
      "qualityChecklist": [
        "workflow_execution_operations tool executed with complete_execution operation",
        "Current executionId provided for proper execution completion",
        "Execution completion success validated and confirmed",
        "Entire workflow process completed successfully with proper closure",
        "Final execution status documented and completion summary provided",
        "Comprehensive workflow completion achieved with all evidence preserved"
      ],
      "conditions": [
        {
          "name": "task_completion_finalized",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "final_quality_validation_and_task_completion"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "workflow_execution_completion",
      "reportTemplate": "workflow_execution_completion_final"
    }
  ]
}
